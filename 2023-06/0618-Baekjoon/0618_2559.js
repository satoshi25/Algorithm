/*
https://www.acmicpc.net/problem/2559
Baekjoon
2559 수열

문제
매일 아침 9시에 학교에서 측정한 온도가 어떤 정수의 수열로 주어졌을 때, 
연속적인 며칠 동안의 온도의 합이 가장 큰 값을 알아보고자 한다.

예를 들어, 아래와 같이 10일 간의 온도가 주어졌을 때, 

3 -2 -4 -9 0 3 7 13 8 -3

모든 연속적인 이틀간의 온도의 합은 아래와 같다.
     1        -13         3        20         5
  |----|     |----|    |----|    |----|    |----|
---------------------------------------------------
|  3 | -2 | -4 | -9 |  0 |  3 |  7 | 13 |  8 | -3 |
---------------------------------------------------
       |-----|    |----|    |----|    |----|
			    -6        -9        10        21
이때, 온도의 합이 가장 큰 값은 21이다. 

또 다른 예로 위와 같은 온도가 주어졌을 때, 
모든 연속적인 5일 간의 온도의 합은 아래와 같으며, 

---------------------------------------------------
|  3 | -2 | -4 | -9 |  0 |  3 |  7 | 13 |  8 | -3 |
---------------------------------------------------
   |-------------------|
	          -12
				|-------------------|
				          -12
				     |-------------------|
						            -3
							    |-------------------|
									           14
											 |-------------------|
											           31
													  |-------------------|
														         28
이때, 온도의 합이 가장 큰 값은 31이다.

매일 측정한 온도가 정수의 수열로 주어졌을 때, 
연속적인 며칠 동안의 온도의 합이 가장 큰 값을 계산하는 프로그램을 작성하시오. 

입력
첫째 줄에는 두 개의 정수 N과 K가 한 개의 공백을 사이에 두고 순서대로 주어진다. 
첫 번째 정수 N은 온도를 측정한 전체 날짜의 수이다. 
N은 2 이상 100,000 이하이다. 
두 번째 정수 K는 합을 구하기 위한 연속적인 날짜의 수이다. 
K는 1과 N 사이의 정수이다. 
둘째 줄에는 매일 측정한 온도를 나타내는 N개의 정수가 빈칸을 사이에 두고 주어진다. 
이 수들은 모두 -100 이상 100 이하이다. 

출력
첫째 줄에는 입력되는 온도의 수열에서 연속적인 K일의 온도의 합이 최대가 되는 값을 출력한다.

예제 입력 1 
10 2
3 -2 -4 -9 0 3 7 13 8 -3
예제 출력 1 
21

예제 입력 2 
10 5
3 -2 -4 -9 0 3 7 13 8 -3
예제 출력 2 
31
*/

const path = process.platform === 'linux' ? '/dev/stdin' : './input.txt';
let [[len, sumCnt], temLog] = require('fs')
  .readFileSync(path)
  .toString()
  .trim()
  .split('\n')
  .map((el) => (el = el.split(' ').map(Number)));

let totalSumArr = new Array(len).fill(0);
let sumArr = [];

for (let i = 0; i < len; i++) {
  if (i === 0) {
    totalSumArr[i] = temLog[i];
  } else {
    totalSumArr[i] = totalSumArr[i - 1] + temLog[i];
  }
}

for (let i = sumCnt - 1; i < len; i++) {
  if (i === sumCnt - 1) {
    sumArr.push(totalSumArr[i]);
  } else {
    sumArr.push(totalSumArr[i] - totalSumArr[i - sumCnt]);
  }
}

console.log(Math.max(...sumArr));

// 구간합 중 최대값을 구한다.
// 구간합의 구간은 입력으로 주어진다.
// 구간합은 누적합 배열을 만들고 구간만큼의 구간합을 빼서 구한다.
// temLog = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] 온도가 왼쪽이라면
// totalSumArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 누적합은 왼쪽과 같다.
// 구간이 2라면
// 누적합의 3인덱스는 세개를 합한 값이다.
// 누적합의 5인덱스는 다섯개를 합한 값이다.
// 누적합 5인덱스에서 3인덱스를 빼면 temLog의 4, 5인덱스 두개를 더한것과 같다.
// sumArr[5] - sumArr[3] === temLog[4] + temLog[5]
